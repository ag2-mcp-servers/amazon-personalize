# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:58:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, confloat, conint, constr


class AccountId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Arn(
    RootModel[constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)]
):
    root: constr(pattern=r'arn:([a-z\d-]+):personalize:.*:.*:.+', max_length=256)


class ArnList(RootModel[List[Arn]]):
    root: List[Arn] = Field(..., max_length=100)


class AutoMLResult(BaseModel):
    bestRecipeArn: Optional[Arn] = None


class AvroSchema(RootModel[constr(max_length=10000)]):
    root: constr(max_length=10000)


class Boolean(RootModel[bool]):
    root: bool


class CategoricalValue(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class CategoricalValues(RootModel[List[CategoricalValue]]):
    root: List[CategoricalValue] = Field(..., max_length=100)


class ContinuousMaxValue(RootModel[confloat(ge=-1000000.0)]):
    root: confloat(ge=-1000000.0)


class ContinuousMinValue(RootModel[confloat(ge=-1000000.0)]):
    root: confloat(ge=-1000000.0)


class CreateBatchInferenceJobResponse(BaseModel):
    batchInferenceJobArn: Optional[Arn] = None


class CreateBatchSegmentJobResponse(BaseModel):
    batchSegmentJobArn: Optional[Arn] = None


class CreateCampaignResponse(BaseModel):
    campaignArn: Optional[Arn] = None


class CreateDatasetExportJobResponse(BaseModel):
    datasetExportJobArn: Optional[Arn] = None


class CreateDatasetImportJobResponse(BaseModel):
    datasetImportJobArn: Optional[Arn] = None


class CreateDatasetResponse(BaseModel):
    datasetArn: Optional[Arn] = None


class CreateFilterResponse(BaseModel):
    filterArn: Optional[Arn] = None


class CreateMetricAttributionResponse(BaseModel):
    metricAttributionArn: Optional[Arn] = None


class CreateRecommenderResponse(BaseModel):
    recommenderArn: Optional[Arn] = None


class CreateSchemaResponse(BaseModel):
    schemaArn: Optional[Arn] = None


class CreateSolutionResponse(BaseModel):
    solutionArn: Optional[Arn] = None


class CreateSolutionVersionResponse(BaseModel):
    solutionVersionArn: Optional[Arn] = None


class DatasetType(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Date(RootModel[datetime]):
    root: datetime


class DeleteCampaignRequest(BaseModel):
    campaignArn: Arn


class DeleteDatasetGroupRequest(BaseModel):
    datasetGroupArn: Arn


class DeleteDatasetRequest(BaseModel):
    datasetArn: Arn


class DeleteEventTrackerRequest(BaseModel):
    eventTrackerArn: Arn


class DeleteFilterRequest(BaseModel):
    filterArn: Arn


class DeleteMetricAttributionRequest(BaseModel):
    metricAttributionArn: Arn


class DeleteRecommenderRequest(BaseModel):
    recommenderArn: Arn


class DeleteSchemaRequest(BaseModel):
    schemaArn: Arn


class DeleteSolutionRequest(BaseModel):
    solutionArn: Arn


class DescribeAlgorithmRequest(BaseModel):
    algorithmArn: Arn


class DescribeBatchInferenceJobRequest(BaseModel):
    batchInferenceJobArn: Arn


class DescribeBatchSegmentJobRequest(BaseModel):
    batchSegmentJobArn: Arn


class DescribeCampaignRequest(BaseModel):
    campaignArn: Arn


class DescribeDatasetExportJobRequest(BaseModel):
    datasetExportJobArn: Arn


class DescribeDatasetGroupRequest(BaseModel):
    datasetGroupArn: Arn


class DescribeDatasetImportJobRequest(BaseModel):
    datasetImportJobArn: Arn


class DescribeDatasetRequest(BaseModel):
    datasetArn: Arn


class DescribeEventTrackerRequest(BaseModel):
    eventTrackerArn: Arn


class DescribeFeatureTransformationRequest(BaseModel):
    featureTransformationArn: Arn


class DescribeFilterRequest(BaseModel):
    filterArn: Arn


class DescribeMetricAttributionRequest(BaseModel):
    metricAttributionArn: Arn


class DescribeRecipeRequest(BaseModel):
    recipeArn: Arn


class DescribeRecommenderRequest(BaseModel):
    recommenderArn: Arn


class DescribeSchemaRequest(BaseModel):
    schemaArn: Arn


class DescribeSolutionRequest(BaseModel):
    solutionArn: Arn


class DescribeSolutionVersionRequest(BaseModel):
    solutionVersionArn: Arn


class Description(RootModel[str]):
    root: str


class DockerURI(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Domain(Enum):
    ECOMMERCE = 'ECOMMERCE'
    VIDEO_ON_DEMAND = 'VIDEO_ON_DEMAND'


class EventType(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class EventValueThreshold(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class FailureReason(RootModel[str]):
    root: str


class FilterExpression(RootModel[SecretStr]):
    root: SecretStr


class GetSolutionMetricsRequest(BaseModel):
    solutionVersionArn: Arn


class HPOObjectiveType(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class HPOResource(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class HPOResourceConfig(BaseModel):
    maxNumberOfTrainingJobs: Optional[HPOResource] = None
    maxParallelTrainingJobs: Optional[HPOResource] = None


class ImportMode(Enum):
    FULL = 'FULL'
    INCREMENTAL = 'INCREMENTAL'


class IngestionMode(Enum):
    BULK = 'BULK'
    PUT = 'PUT'
    ALL = 'ALL'


class IntegerMaxValue(RootModel[conint(le=1000000)]):
    root: conint(le=1000000)


class IntegerMinValue(RootModel[conint(ge=-1000000)]):
    root: conint(ge=-1000000)


class InvalidInputException(RootModel[Any]):
    root: Any


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class ItemAttribute(RootModel[constr(min_length=1, max_length=150)]):
    root: constr(min_length=1, max_length=150)


class KmsKeyArn(
    RootModel[constr(pattern=r'arn:aws.*:kms:.*:[0-9]{12}:key/.*', max_length=2048)]
):
    root: constr(pattern=r'arn:aws.*:kms:.*:[0-9]{12}:key/.*', max_length=2048)


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    resourceArn: Arn


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MetricExpression(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class MetricName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class MetricRegex(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class MetricValue(RootModel[float]):
    root: float


class Metrics(RootModel[Optional[Dict[str, MetricValue]]]):
    root: Optional[Dict[str, MetricValue]] = None


class Name(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)


class NextToken(RootModel[constr(max_length=1500)]):
    root: constr(max_length=1500)


class NumBatchResults(RootModel[int]):
    root: int


class ObjectiveSensitivity(Enum):
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    OFF = 'OFF'


class OptimizationObjective(BaseModel):
    itemAttribute: Optional[ItemAttribute] = None
    objectiveSensitivity: Optional[ObjectiveSensitivity] = None


class ParameterName(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ParameterValue(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class PerformAutoML(RootModel[bool]):
    root: bool


class PerformHPO(RootModel[bool]):
    root: bool


class RecipeProvider(Enum):
    SERVICE = 'SERVICE'


class RecipeType(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceConfig(RootModel[Optional[Dict[str, ParameterValue]]]):
    root: Optional[Dict[str, ParameterValue]] = None


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RoleArn(
    RootModel[
        constr(
            pattern=r'arn:([a-z\d-]+):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:([a-z\d-]+):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+',
        max_length=256,
    )


class S3Location(RootModel[constr(pattern=r'(s3|http|https)://.+', max_length=256)]):
    root: constr(pattern=r'(s3|http|https)://.+', max_length=256)


class StartRecommenderRequest(BaseModel):
    recommenderArn: Arn


class StartRecommenderResponse(BaseModel):
    recommenderArn: Optional[Arn] = None


class Status(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class StopRecommenderRequest(BaseModel):
    recommenderArn: Arn


class StopRecommenderResponse(BaseModel):
    recommenderArn: Optional[Arn] = None


class StopSolutionVersionCreationRequest(BaseModel):
    solutionVersionArn: Arn


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TooManyTagKeysException(RootModel[Any]):
    root: Any


class TooManyTagsException(RootModel[Any]):
    root: Any


class TrackingId(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TrainingHours(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class TrainingInputMode(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TrainingMode(Enum):
    FULL = 'FULL'
    UPDATE = 'UPDATE'


class TransactionsPerSecond(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Tunable(RootModel[bool]):
    root: bool


class UntagResourceRequest(BaseModel):
    resourceArn: Arn
    tagKeys: TagKeys


class UntagResourceResponse(BaseModel):
    pass


class UpdateCampaignResponse(BaseModel):
    campaignArn: Optional[Arn] = None


class UpdateMetricAttributionResponse(BaseModel):
    metricAttributionArn: Optional[Arn] = None


class UpdateRecommenderResponse(BaseModel):
    recommenderArn: Optional[Arn] = None


class XAmzTarget(Enum):
    AmazonPersonalize_CreateBatchInferenceJob = (
        'AmazonPersonalize.CreateBatchInferenceJob'
    )


class XAmzTarget1(Enum):
    AmazonPersonalize_CreateBatchSegmentJob = 'AmazonPersonalize.CreateBatchSegmentJob'


class XAmzTarget2(Enum):
    AmazonPersonalize_CreateCampaign = 'AmazonPersonalize.CreateCampaign'


class XAmzTarget3(Enum):
    AmazonPersonalize_CreateDataset = 'AmazonPersonalize.CreateDataset'


class XAmzTarget4(Enum):
    AmazonPersonalize_CreateDatasetExportJob = (
        'AmazonPersonalize.CreateDatasetExportJob'
    )


class XAmzTarget5(Enum):
    AmazonPersonalize_CreateDatasetGroup = 'AmazonPersonalize.CreateDatasetGroup'


class XAmzTarget6(Enum):
    AmazonPersonalize_CreateDatasetImportJob = (
        'AmazonPersonalize.CreateDatasetImportJob'
    )


class XAmzTarget7(Enum):
    AmazonPersonalize_CreateEventTracker = 'AmazonPersonalize.CreateEventTracker'


class XAmzTarget8(Enum):
    AmazonPersonalize_CreateFilter = 'AmazonPersonalize.CreateFilter'


class XAmzTarget9(Enum):
    AmazonPersonalize_CreateMetricAttribution = (
        'AmazonPersonalize.CreateMetricAttribution'
    )


class XAmzTarget10(Enum):
    AmazonPersonalize_CreateRecommender = 'AmazonPersonalize.CreateRecommender'


class XAmzTarget11(Enum):
    AmazonPersonalize_CreateSchema = 'AmazonPersonalize.CreateSchema'


class XAmzTarget12(Enum):
    AmazonPersonalize_CreateSolution = 'AmazonPersonalize.CreateSolution'


class XAmzTarget13(Enum):
    AmazonPersonalize_CreateSolutionVersion = 'AmazonPersonalize.CreateSolutionVersion'


class XAmzTarget14(Enum):
    AmazonPersonalize_DeleteCampaign = 'AmazonPersonalize.DeleteCampaign'


class XAmzTarget15(Enum):
    AmazonPersonalize_DeleteDataset = 'AmazonPersonalize.DeleteDataset'


class XAmzTarget16(Enum):
    AmazonPersonalize_DeleteDatasetGroup = 'AmazonPersonalize.DeleteDatasetGroup'


class XAmzTarget17(Enum):
    AmazonPersonalize_DeleteEventTracker = 'AmazonPersonalize.DeleteEventTracker'


class XAmzTarget18(Enum):
    AmazonPersonalize_DeleteFilter = 'AmazonPersonalize.DeleteFilter'


class XAmzTarget19(Enum):
    AmazonPersonalize_DeleteMetricAttribution = (
        'AmazonPersonalize.DeleteMetricAttribution'
    )


class XAmzTarget20(Enum):
    AmazonPersonalize_DeleteRecommender = 'AmazonPersonalize.DeleteRecommender'


class XAmzTarget21(Enum):
    AmazonPersonalize_DeleteSchema = 'AmazonPersonalize.DeleteSchema'


class XAmzTarget22(Enum):
    AmazonPersonalize_DeleteSolution = 'AmazonPersonalize.DeleteSolution'


class XAmzTarget23(Enum):
    AmazonPersonalize_DescribeAlgorithm = 'AmazonPersonalize.DescribeAlgorithm'


class XAmzTarget24(Enum):
    AmazonPersonalize_DescribeBatchInferenceJob = (
        'AmazonPersonalize.DescribeBatchInferenceJob'
    )


class XAmzTarget25(Enum):
    AmazonPersonalize_DescribeBatchSegmentJob = (
        'AmazonPersonalize.DescribeBatchSegmentJob'
    )


class XAmzTarget26(Enum):
    AmazonPersonalize_DescribeCampaign = 'AmazonPersonalize.DescribeCampaign'


class XAmzTarget27(Enum):
    AmazonPersonalize_DescribeDataset = 'AmazonPersonalize.DescribeDataset'


class XAmzTarget28(Enum):
    AmazonPersonalize_DescribeDatasetExportJob = (
        'AmazonPersonalize.DescribeDatasetExportJob'
    )


class XAmzTarget29(Enum):
    AmazonPersonalize_DescribeDatasetGroup = 'AmazonPersonalize.DescribeDatasetGroup'


class XAmzTarget30(Enum):
    AmazonPersonalize_DescribeDatasetImportJob = (
        'AmazonPersonalize.DescribeDatasetImportJob'
    )


class XAmzTarget31(Enum):
    AmazonPersonalize_DescribeEventTracker = 'AmazonPersonalize.DescribeEventTracker'


class XAmzTarget32(Enum):
    AmazonPersonalize_DescribeFeatureTransformation = (
        'AmazonPersonalize.DescribeFeatureTransformation'
    )


class XAmzTarget33(Enum):
    AmazonPersonalize_DescribeFilter = 'AmazonPersonalize.DescribeFilter'


class XAmzTarget34(Enum):
    AmazonPersonalize_DescribeMetricAttribution = (
        'AmazonPersonalize.DescribeMetricAttribution'
    )


class XAmzTarget35(Enum):
    AmazonPersonalize_DescribeRecipe = 'AmazonPersonalize.DescribeRecipe'


class XAmzTarget36(Enum):
    AmazonPersonalize_DescribeRecommender = 'AmazonPersonalize.DescribeRecommender'


class XAmzTarget37(Enum):
    AmazonPersonalize_DescribeSchema = 'AmazonPersonalize.DescribeSchema'


class XAmzTarget38(Enum):
    AmazonPersonalize_DescribeSolution = 'AmazonPersonalize.DescribeSolution'


class XAmzTarget39(Enum):
    AmazonPersonalize_DescribeSolutionVersion = (
        'AmazonPersonalize.DescribeSolutionVersion'
    )


class XAmzTarget40(Enum):
    AmazonPersonalize_GetSolutionMetrics = 'AmazonPersonalize.GetSolutionMetrics'


class XAmzTarget41(Enum):
    AmazonPersonalize_ListBatchInferenceJobs = (
        'AmazonPersonalize.ListBatchInferenceJobs'
    )


class XAmzTarget42(Enum):
    AmazonPersonalize_ListBatchSegmentJobs = 'AmazonPersonalize.ListBatchSegmentJobs'


class XAmzTarget43(Enum):
    AmazonPersonalize_ListCampaigns = 'AmazonPersonalize.ListCampaigns'


class XAmzTarget44(Enum):
    AmazonPersonalize_ListDatasetExportJobs = 'AmazonPersonalize.ListDatasetExportJobs'


class XAmzTarget45(Enum):
    AmazonPersonalize_ListDatasetGroups = 'AmazonPersonalize.ListDatasetGroups'


class XAmzTarget46(Enum):
    AmazonPersonalize_ListDatasetImportJobs = 'AmazonPersonalize.ListDatasetImportJobs'


class XAmzTarget47(Enum):
    AmazonPersonalize_ListDatasets = 'AmazonPersonalize.ListDatasets'


class XAmzTarget48(Enum):
    AmazonPersonalize_ListEventTrackers = 'AmazonPersonalize.ListEventTrackers'


class XAmzTarget49(Enum):
    AmazonPersonalize_ListFilters = 'AmazonPersonalize.ListFilters'


class XAmzTarget50(Enum):
    AmazonPersonalize_ListMetricAttributionMetrics = (
        'AmazonPersonalize.ListMetricAttributionMetrics'
    )


class XAmzTarget51(Enum):
    AmazonPersonalize_ListMetricAttributions = (
        'AmazonPersonalize.ListMetricAttributions'
    )


class XAmzTarget52(Enum):
    AmazonPersonalize_ListRecipes = 'AmazonPersonalize.ListRecipes'


class XAmzTarget53(Enum):
    AmazonPersonalize_ListRecommenders = 'AmazonPersonalize.ListRecommenders'


class XAmzTarget54(Enum):
    AmazonPersonalize_ListSchemas = 'AmazonPersonalize.ListSchemas'


class XAmzTarget55(Enum):
    AmazonPersonalize_ListSolutionVersions = 'AmazonPersonalize.ListSolutionVersions'


class XAmzTarget56(Enum):
    AmazonPersonalize_ListSolutions = 'AmazonPersonalize.ListSolutions'


class XAmzTarget57(Enum):
    AmazonPersonalize_ListTagsForResource = 'AmazonPersonalize.ListTagsForResource'


class XAmzTarget58(Enum):
    AmazonPersonalize_StartRecommender = 'AmazonPersonalize.StartRecommender'


class XAmzTarget59(Enum):
    AmazonPersonalize_StopRecommender = 'AmazonPersonalize.StopRecommender'


class XAmzTarget60(Enum):
    AmazonPersonalize_StopSolutionVersionCreation = (
        'AmazonPersonalize.StopSolutionVersionCreation'
    )


class XAmzTarget61(Enum):
    AmazonPersonalize_TagResource = 'AmazonPersonalize.TagResource'


class XAmzTarget62(Enum):
    AmazonPersonalize_UntagResource = 'AmazonPersonalize.UntagResource'


class XAmzTarget63(Enum):
    AmazonPersonalize_UpdateCampaign = 'AmazonPersonalize.UpdateCampaign'


class XAmzTarget64(Enum):
    AmazonPersonalize_UpdateMetricAttribution = (
        'AmazonPersonalize.UpdateMetricAttribution'
    )


class XAmzTarget65(Enum):
    AmazonPersonalize_UpdateRecommender = 'AmazonPersonalize.UpdateRecommender'


class AlgorithmImage(BaseModel):
    dockerURI: DockerURI
    name: Optional[Name] = None


class AutoMLConfig(BaseModel):
    metricName: Optional[MetricName] = None
    recipeList: Optional[ArnList] = None


class BatchInferenceJobSummary(BaseModel):
    batchInferenceJobArn: Optional[Arn] = None
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    jobName: Optional[Name] = None
    lastUpdatedDateTime: Optional[Date] = None
    solutionVersionArn: Optional[Arn] = None
    status: Optional[Status] = None


class BatchInferenceJobs(RootModel[List[BatchInferenceJobSummary]]):
    root: List[BatchInferenceJobSummary] = Field(..., max_length=100)


class BatchSegmentJobSummary(BaseModel):
    batchSegmentJobArn: Optional[Arn] = None
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    jobName: Optional[Name] = None
    lastUpdatedDateTime: Optional[Date] = None
    solutionVersionArn: Optional[Arn] = None
    status: Optional[Status] = None


class BatchSegmentJobs(RootModel[List[BatchSegmentJobSummary]]):
    root: List[BatchSegmentJobSummary] = Field(..., max_length=100)


class CampaignSummary(BaseModel):
    campaignArn: Optional[Arn] = None
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class Campaigns(RootModel[List[CampaignSummary]]):
    root: List[CampaignSummary] = Field(..., max_length=100)


class CategoricalHyperParameterRange(BaseModel):
    name: Optional[ParameterName] = None
    values: Optional[CategoricalValues] = None


class CategoricalHyperParameterRanges(RootModel[List[CategoricalHyperParameterRange]]):
    root: List[CategoricalHyperParameterRange] = Field(..., max_length=100)


class ContinuousHyperParameterRange(BaseModel):
    maxValue: Optional[ContinuousMaxValue] = None
    minValue: Optional[ContinuousMinValue] = None
    name: Optional[ParameterName] = None


class ContinuousHyperParameterRanges(RootModel[List[ContinuousHyperParameterRange]]):
    root: List[ContinuousHyperParameterRange] = Field(..., max_length=100)


class CreateDatasetGroupResponse(BaseModel):
    datasetGroupArn: Optional[Arn] = None
    domain: Optional[Domain] = None


class CreateEventTrackerResponse(BaseModel):
    eventTrackerArn: Optional[Arn] = None
    trackingId: Optional[TrackingId] = None


class CreateSchemaRequest(BaseModel):
    domain: Optional[Domain] = None
    name: Name
    schema_: AvroSchema = Field(..., alias='schema')


class DataSource(BaseModel):
    dataLocation: Optional[S3Location] = None


class Dataset(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetArn: Optional[Arn] = None
    datasetGroupArn: Optional[Arn] = None
    datasetType: Optional[DatasetType] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    schemaArn: Optional[Arn] = None
    status: Optional[Status] = None


class DatasetExportJobSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetExportJobArn: Optional[Arn] = None
    failureReason: Optional[FailureReason] = None
    jobName: Optional[Name] = None
    lastUpdatedDateTime: Optional[Date] = None
    status: Optional[Status] = None


class DatasetExportJobs(RootModel[List[DatasetExportJobSummary]]):
    root: List[DatasetExportJobSummary] = Field(..., max_length=100)


class DatasetGroup(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    domain: Optional[Domain] = None
    failureReason: Optional[FailureReason] = None
    kmsKeyArn: Optional[KmsKeyArn] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    roleArn: Optional[RoleArn] = None
    status: Optional[Status] = None


class DatasetGroupSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    domain: Optional[Domain] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class DatasetGroups(RootModel[List[DatasetGroupSummary]]):
    root: List[DatasetGroupSummary] = Field(..., max_length=100)


class DatasetImportJob(BaseModel):
    creationDateTime: Optional[Date] = None
    dataSource: Optional[DataSource] = None
    datasetArn: Optional[Arn] = None
    datasetImportJobArn: Optional[Arn] = None
    failureReason: Optional[FailureReason] = None
    importMode: Optional[ImportMode] = None
    jobName: Optional[Name] = None
    lastUpdatedDateTime: Optional[Date] = None
    publishAttributionMetricsToS3: Optional[Boolean] = None
    roleArn: Optional[Arn] = None
    status: Optional[Status] = None


class DatasetImportJobSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetImportJobArn: Optional[Arn] = None
    failureReason: Optional[FailureReason] = None
    importMode: Optional[ImportMode] = None
    jobName: Optional[Name] = None
    lastUpdatedDateTime: Optional[Date] = None
    status: Optional[Status] = None


class DatasetImportJobs(RootModel[List[DatasetImportJobSummary]]):
    root: List[DatasetImportJobSummary] = Field(..., max_length=100)


class DatasetSchema(BaseModel):
    creationDateTime: Optional[Date] = None
    domain: Optional[Domain] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    schema_: Optional[AvroSchema] = Field(None, alias='schema')
    schemaArn: Optional[Arn] = None


class DatasetSchemaSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    domain: Optional[Domain] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    schemaArn: Optional[Arn] = None


class DatasetSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetArn: Optional[Arn] = None
    datasetType: Optional[DatasetType] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class Datasets(RootModel[List[DatasetSummary]]):
    root: List[DatasetSummary] = Field(..., max_length=100)


class DefaultCategoricalHyperParameterRange(BaseModel):
    isTunable: Optional[Tunable] = None
    name: Optional[ParameterName] = None
    values: Optional[CategoricalValues] = None


class DefaultCategoricalHyperParameterRanges(
    RootModel[List[DefaultCategoricalHyperParameterRange]]
):
    root: List[DefaultCategoricalHyperParameterRange] = Field(..., max_length=100)


class DefaultContinuousHyperParameterRange(BaseModel):
    isTunable: Optional[Tunable] = None
    maxValue: Optional[ContinuousMaxValue] = None
    minValue: Optional[ContinuousMinValue] = None
    name: Optional[ParameterName] = None


class DefaultContinuousHyperParameterRanges(
    RootModel[List[DefaultContinuousHyperParameterRange]]
):
    root: List[DefaultContinuousHyperParameterRange] = Field(..., max_length=100)


class DefaultIntegerHyperParameterRange(BaseModel):
    isTunable: Optional[Tunable] = None
    maxValue: Optional[IntegerMaxValue] = None
    minValue: Optional[IntegerMinValue] = None
    name: Optional[ParameterName] = None


class DefaultIntegerHyperParameterRanges(
    RootModel[List[DefaultIntegerHyperParameterRange]]
):
    root: List[DefaultIntegerHyperParameterRange] = Field(..., max_length=100)


class DescribeDatasetGroupResponse(BaseModel):
    datasetGroup: Optional[DatasetGroup] = None


class DescribeDatasetImportJobResponse(BaseModel):
    datasetImportJob: Optional[DatasetImportJob] = None


class DescribeDatasetResponse(BaseModel):
    dataset: Optional[Dataset] = None


class DescribeSchemaResponse(BaseModel):
    schema_: Optional[DatasetSchema] = Field(None, alias='schema')


class EventTracker(BaseModel):
    accountId: Optional[AccountId] = None
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    eventTrackerArn: Optional[Arn] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    status: Optional[Status] = None
    trackingId: Optional[TrackingId] = None


class EventTrackerSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    eventTrackerArn: Optional[Arn] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class EventTrackers(RootModel[List[EventTrackerSummary]]):
    root: List[EventTrackerSummary] = Field(..., max_length=100)


class FeatureTransformationParameters(RootModel[Optional[Dict[str, ParameterValue]]]):
    root: Optional[Dict[str, ParameterValue]] = None


class FeaturizationParameters(RootModel[Optional[Dict[str, ParameterValue]]]):
    root: Optional[Dict[str, ParameterValue]] = None


class Filter(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    failureReason: Optional[FailureReason] = None
    filterArn: Optional[Arn] = None
    filterExpression: Optional[FilterExpression] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class FilterSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    failureReason: Optional[FailureReason] = None
    filterArn: Optional[Arn] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class Filters(RootModel[List[FilterSummary]]):
    root: List[FilterSummary] = Field(..., max_length=100)


class GetSolutionMetricsResponse(BaseModel):
    metrics: Optional[Metrics] = None
    solutionVersionArn: Optional[Arn] = None


class HPOObjective(BaseModel):
    metricName: Optional[MetricName] = None
    metricRegex: Optional[MetricRegex] = None
    type: Optional[HPOObjectiveType] = None


class HyperParameters(RootModel[Optional[Dict[str, ParameterValue]]]):
    root: Optional[Dict[str, ParameterValue]] = None


class IntegerHyperParameterRange(BaseModel):
    maxValue: Optional[IntegerMaxValue] = None
    minValue: Optional[IntegerMinValue] = None
    name: Optional[ParameterName] = None


class IntegerHyperParameterRanges(RootModel[List[IntegerHyperParameterRange]]):
    root: List[IntegerHyperParameterRange] = Field(..., max_length=100)


class ListBatchInferenceJobsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    solutionVersionArn: Optional[Arn] = None


class ListBatchInferenceJobsResponse(BaseModel):
    batchInferenceJobs: Optional[BatchInferenceJobs] = None
    nextToken: Optional[NextToken] = None


class ListBatchSegmentJobsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    solutionVersionArn: Optional[Arn] = None


class ListBatchSegmentJobsResponse(BaseModel):
    batchSegmentJobs: Optional[BatchSegmentJobs] = None
    nextToken: Optional[NextToken] = None


class ListCampaignsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    solutionArn: Optional[Arn] = None


class ListCampaignsResponse(BaseModel):
    campaigns: Optional[Campaigns] = None
    nextToken: Optional[NextToken] = None


class ListDatasetExportJobsRequest(BaseModel):
    datasetArn: Optional[Arn] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListDatasetExportJobsResponse(BaseModel):
    datasetExportJobs: Optional[DatasetExportJobs] = None
    nextToken: Optional[NextToken] = None


class ListDatasetGroupsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListDatasetGroupsResponse(BaseModel):
    datasetGroups: Optional[DatasetGroups] = None
    nextToken: Optional[NextToken] = None


class ListDatasetImportJobsRequest(BaseModel):
    datasetArn: Optional[Arn] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListDatasetImportJobsResponse(BaseModel):
    datasetImportJobs: Optional[DatasetImportJobs] = None
    nextToken: Optional[NextToken] = None


class ListDatasetsRequest(BaseModel):
    datasetGroupArn: Optional[Arn] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListDatasetsResponse(BaseModel):
    datasets: Optional[Datasets] = None
    nextToken: Optional[NextToken] = None


class ListEventTrackersRequest(BaseModel):
    datasetGroupArn: Optional[Arn] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListEventTrackersResponse(BaseModel):
    eventTrackers: Optional[EventTrackers] = None
    nextToken: Optional[NextToken] = None


class ListFiltersRequest(BaseModel):
    datasetGroupArn: Optional[Arn] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListFiltersResponse(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    nextToken: Optional[NextToken] = None


class ListMetricAttributionMetricsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    metricAttributionArn: Optional[Arn] = None
    nextToken: Optional[NextToken] = None


class ListMetricAttributionsRequest(BaseModel):
    datasetGroupArn: Optional[Arn] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListRecipesRequest(BaseModel):
    domain: Optional[Domain] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    recipeProvider: Optional[RecipeProvider] = None


class ListRecommendersRequest(BaseModel):
    datasetGroupArn: Optional[Arn] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListSchemasRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class ListSolutionVersionsRequest(BaseModel):
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None
    solutionArn: Optional[Arn] = None


class ListSolutionsRequest(BaseModel):
    datasetGroupArn: Optional[Arn] = None
    maxResults: Optional[MaxResults] = None
    nextToken: Optional[NextToken] = None


class MetricAttribute(BaseModel):
    eventType: EventType
    expression: MetricExpression
    metricName: MetricName


class MetricAttributes(RootModel[List[MetricAttribute]]):
    root: List[MetricAttribute] = Field(..., max_length=10)


class MetricAttributesNamesList(RootModel[List[MetricName]]):
    root: List[MetricName] = Field(..., max_length=10)


class MetricAttributionSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    metricAttributionArn: Optional[Arn] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class MetricAttributions(RootModel[List[MetricAttributionSummary]]):
    root: List[MetricAttributionSummary] = Field(..., max_length=100)


class Recipe(BaseModel):
    algorithmArn: Optional[Arn] = None
    creationDateTime: Optional[Date] = None
    description: Optional[Description] = None
    featureTransformationArn: Optional[Arn] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    recipeArn: Optional[Arn] = None
    recipeType: Optional[RecipeType] = None
    status: Optional[Status] = None


class RecipeSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    domain: Optional[Domain] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    recipeArn: Optional[Arn] = None
    status: Optional[Status] = None


class Recipes(RootModel[List[RecipeSummary]]):
    root: List[RecipeSummary] = Field(..., max_length=100)


class RecommenderConfig(BaseModel):
    itemExplorationConfig: Optional[HyperParameters] = None
    minRecommendationRequestsPerSecond: Optional[TransactionsPerSecond] = None


class RecommenderSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    recipeArn: Optional[Arn] = None
    recommenderArn: Optional[Arn] = None
    recommenderConfig: Optional[RecommenderConfig] = None
    status: Optional[Status] = None


class RecommenderUpdateSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    recommenderConfig: Optional[RecommenderConfig] = None
    status: Optional[Status] = None


class Recommenders(RootModel[List[RecommenderSummary]]):
    root: List[RecommenderSummary] = Field(..., max_length=100)


class S3DataConfig(BaseModel):
    kmsKeyArn: Optional[KmsKeyArn] = None
    path: S3Location


class Schemas(RootModel[List[DatasetSchemaSummary]]):
    root: List[DatasetSchemaSummary] = Field(..., max_length=100)


class SolutionSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    recipeArn: Optional[Arn] = None
    solutionArn: Optional[Arn] = None
    status: Optional[Status] = None


class SolutionVersionSummary(BaseModel):
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    solutionVersionArn: Optional[Arn] = None
    status: Optional[Status] = None


class SolutionVersions(RootModel[List[SolutionVersionSummary]]):
    root: List[SolutionVersionSummary] = Field(..., max_length=100)


class Solutions(RootModel[List[SolutionSummary]]):
    root: List[SolutionSummary] = Field(..., max_length=100)


class Tag(BaseModel):
    tagKey: TagKey
    tagValue: TagValue


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TunedHPOParams(BaseModel):
    algorithmHyperParameters: Optional[HyperParameters] = None


class UpdateRecommenderRequest(BaseModel):
    recommenderArn: Arn
    recommenderConfig: RecommenderConfig


class BatchInferenceJobConfig(BaseModel):
    itemExplorationConfig: Optional[HyperParameters] = None


class BatchInferenceJobInput(BaseModel):
    s3DataSource: S3DataConfig


class BatchInferenceJobOutput(BaseModel):
    s3DataDestination: S3DataConfig


class BatchSegmentJobInput(BaseModel):
    s3DataSource: S3DataConfig


class BatchSegmentJobOutput(BaseModel):
    s3DataDestination: S3DataConfig


class CampaignConfig(BaseModel):
    itemExplorationConfig: Optional[HyperParameters] = None


class CampaignUpdateSummary(BaseModel):
    campaignConfig: Optional[CampaignConfig] = None
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    minProvisionedTPS: Optional[TransactionsPerSecond] = None
    solutionVersionArn: Optional[Arn] = None
    status: Optional[Status] = None


class CreateBatchInferenceJobRequest(BaseModel):
    batchInferenceJobConfig: Optional[BatchInferenceJobConfig] = None
    filterArn: Optional[Arn] = None
    jobInput: BatchInferenceJobInput
    jobName: Name
    jobOutput: BatchInferenceJobOutput
    numResults: Optional[NumBatchResults] = None
    roleArn: RoleArn
    solutionVersionArn: Arn
    tags: Optional[Tags] = None


class CreateBatchSegmentJobRequest(BaseModel):
    filterArn: Optional[Arn] = None
    jobInput: BatchSegmentJobInput
    jobName: Name
    jobOutput: BatchSegmentJobOutput
    numResults: Optional[NumBatchResults] = None
    roleArn: RoleArn
    solutionVersionArn: Arn
    tags: Optional[Tags] = None


class CreateCampaignRequest(BaseModel):
    campaignConfig: Optional[CampaignConfig] = None
    minProvisionedTPS: Optional[TransactionsPerSecond] = None
    name: Name
    solutionVersionArn: Arn
    tags: Optional[Tags] = None


class CreateDatasetGroupRequest(BaseModel):
    domain: Optional[Domain] = None
    kmsKeyArn: Optional[KmsKeyArn] = None
    name: Name
    roleArn: Optional[RoleArn] = None
    tags: Optional[Tags] = None


class CreateDatasetImportJobRequest(BaseModel):
    dataSource: DataSource
    datasetArn: Arn
    importMode: Optional[ImportMode] = None
    jobName: Name
    publishAttributionMetricsToS3: Optional[Boolean] = None
    roleArn: RoleArn
    tags: Optional[Tags] = None


class CreateDatasetRequest(BaseModel):
    datasetGroupArn: Arn
    datasetType: DatasetType
    name: Name
    schemaArn: Arn
    tags: Optional[Tags] = None


class CreateEventTrackerRequest(BaseModel):
    datasetGroupArn: Arn
    name: Name
    tags: Optional[Tags] = None


class CreateFilterRequest(BaseModel):
    datasetGroupArn: Arn
    filterExpression: FilterExpression
    name: Name
    tags: Optional[Tags] = None


class CreateRecommenderRequest(BaseModel):
    datasetGroupArn: Arn
    name: Name
    recipeArn: Arn
    recommenderConfig: Optional[RecommenderConfig] = None
    tags: Optional[Tags] = None


class CreateSolutionVersionRequest(BaseModel):
    name: Optional[Name] = None
    solutionArn: Arn
    tags: Optional[Tags] = None
    trainingMode: Optional[TrainingMode] = None


class DatasetExportJobOutput(BaseModel):
    s3DataDestination: S3DataConfig


class DefaultHyperParameterRanges(BaseModel):
    categoricalHyperParameterRanges: Optional[
        DefaultCategoricalHyperParameterRanges
    ] = None
    continuousHyperParameterRanges: Optional[DefaultContinuousHyperParameterRanges] = (
        None
    )
    integerHyperParameterRanges: Optional[DefaultIntegerHyperParameterRanges] = None


class DescribeEventTrackerResponse(BaseModel):
    eventTracker: Optional[EventTracker] = None


class DescribeFilterResponse(BaseModel):
    filter: Optional[Filter] = None


class DescribeRecipeResponse(BaseModel):
    recipe: Optional[Recipe] = None


class FeatureTransformation(BaseModel):
    creationDateTime: Optional[Date] = None
    defaultParameters: Optional[FeaturizationParameters] = None
    featureTransformationArn: Optional[Arn] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class HyperParameterRanges(BaseModel):
    categoricalHyperParameterRanges: Optional[CategoricalHyperParameterRanges] = None
    continuousHyperParameterRanges: Optional[ContinuousHyperParameterRanges] = None
    integerHyperParameterRanges: Optional[IntegerHyperParameterRanges] = None


class ListMetricAttributionMetricsResponse(BaseModel):
    metrics: Optional[MetricAttributes] = None
    nextToken: Optional[NextToken] = None


class ListMetricAttributionsResponse(BaseModel):
    metricAttributions: Optional[MetricAttributions] = None
    nextToken: Optional[NextToken] = None


class ListRecipesResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    recipes: Optional[Recipes] = None


class ListRecommendersResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    recommenders: Optional[Recommenders] = None


class ListSchemasResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    schemas: Optional[Schemas] = None


class ListSolutionVersionsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    solutionVersions: Optional[SolutionVersions] = None


class ListSolutionsResponse(BaseModel):
    nextToken: Optional[NextToken] = None
    solutions: Optional[Solutions] = None


class ListTagsForResourceResponse(BaseModel):
    tags: Optional[Tags] = None


class MetricAttributionOutput(BaseModel):
    roleArn: RoleArn
    s3DataDestination: Optional[S3DataConfig] = None


class Recommender(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    latestRecommenderUpdate: Optional[RecommenderUpdateSummary] = None
    modelMetrics: Optional[Metrics] = None
    name: Optional[Name] = None
    recipeArn: Optional[Arn] = None
    recommenderArn: Optional[Arn] = None
    recommenderConfig: Optional[RecommenderConfig] = None
    status: Optional[Status] = None


class TagResourceRequest(BaseModel):
    resourceArn: Arn
    tags: Tags


class UpdateCampaignRequest(BaseModel):
    campaignArn: Arn
    campaignConfig: Optional[CampaignConfig] = None
    minProvisionedTPS: Optional[TransactionsPerSecond] = None
    solutionVersionArn: Optional[Arn] = None


class UpdateMetricAttributionRequest(BaseModel):
    addMetrics: Optional[MetricAttributes] = None
    metricAttributionArn: Optional[Arn] = None
    metricsOutputConfig: Optional[MetricAttributionOutput] = None
    removeMetrics: Optional[MetricAttributesNamesList] = None


class Algorithm(BaseModel):
    algorithmArn: Optional[Arn] = None
    algorithmImage: Optional[AlgorithmImage] = None
    creationDateTime: Optional[Date] = None
    defaultHyperParameterRanges: Optional[DefaultHyperParameterRanges] = None
    defaultHyperParameters: Optional[HyperParameters] = None
    defaultResourceConfig: Optional[ResourceConfig] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    roleArn: Optional[Arn] = None
    trainingInputMode: Optional[TrainingInputMode] = None


class BatchInferenceJob(BaseModel):
    batchInferenceJobArn: Optional[Arn] = None
    batchInferenceJobConfig: Optional[BatchInferenceJobConfig] = None
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    filterArn: Optional[Arn] = None
    jobInput: Optional[BatchInferenceJobInput] = None
    jobName: Optional[Name] = None
    jobOutput: Optional[BatchInferenceJobOutput] = None
    lastUpdatedDateTime: Optional[Date] = None
    numResults: Optional[NumBatchResults] = None
    roleArn: Optional[RoleArn] = None
    solutionVersionArn: Optional[Arn] = None
    status: Optional[Status] = None


class BatchSegmentJob(BaseModel):
    batchSegmentJobArn: Optional[Arn] = None
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    filterArn: Optional[Arn] = None
    jobInput: Optional[BatchSegmentJobInput] = None
    jobName: Optional[Name] = None
    jobOutput: Optional[BatchSegmentJobOutput] = None
    lastUpdatedDateTime: Optional[Date] = None
    numResults: Optional[NumBatchResults] = None
    roleArn: Optional[RoleArn] = None
    solutionVersionArn: Optional[Arn] = None
    status: Optional[Status] = None


class Campaign(BaseModel):
    campaignArn: Optional[Arn] = None
    campaignConfig: Optional[CampaignConfig] = None
    creationDateTime: Optional[Date] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    latestCampaignUpdate: Optional[CampaignUpdateSummary] = None
    minProvisionedTPS: Optional[TransactionsPerSecond] = None
    name: Optional[Name] = None
    solutionVersionArn: Optional[Arn] = None
    status: Optional[Status] = None


class CreateDatasetExportJobRequest(BaseModel):
    datasetArn: Arn
    ingestionMode: Optional[IngestionMode] = None
    jobName: Name
    jobOutput: DatasetExportJobOutput
    roleArn: RoleArn
    tags: Optional[Tags] = None


class CreateMetricAttributionRequest(BaseModel):
    datasetGroupArn: Arn
    metrics: MetricAttributes
    metricsOutputConfig: MetricAttributionOutput
    name: Name


class DatasetExportJob(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetArn: Optional[Arn] = None
    datasetExportJobArn: Optional[Arn] = None
    failureReason: Optional[FailureReason] = None
    ingestionMode: Optional[IngestionMode] = None
    jobName: Optional[Name] = None
    jobOutput: Optional[DatasetExportJobOutput] = None
    lastUpdatedDateTime: Optional[Date] = None
    roleArn: Optional[Arn] = None
    status: Optional[Status] = None


class DescribeAlgorithmResponse(BaseModel):
    algorithm: Optional[Algorithm] = None


class DescribeBatchInferenceJobResponse(BaseModel):
    batchInferenceJob: Optional[BatchInferenceJob] = None


class DescribeBatchSegmentJobResponse(BaseModel):
    batchSegmentJob: Optional[BatchSegmentJob] = None


class DescribeCampaignResponse(BaseModel):
    campaign: Optional[Campaign] = None


class DescribeDatasetExportJobResponse(BaseModel):
    datasetExportJob: Optional[DatasetExportJob] = None


class DescribeFeatureTransformationResponse(BaseModel):
    featureTransformation: Optional[FeatureTransformation] = None


class DescribeRecommenderResponse(BaseModel):
    recommender: Optional[Recommender] = None


class HPOConfig(BaseModel):
    algorithmHyperParameterRanges: Optional[HyperParameterRanges] = None
    hpoObjective: Optional[HPOObjective] = None
    hpoResourceConfig: Optional[HPOResourceConfig] = None


class MetricAttribution(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    metricAttributionArn: Optional[Arn] = None
    metricsOutputConfig: Optional[MetricAttributionOutput] = None
    name: Optional[Name] = None
    status: Optional[Status] = None


class SolutionConfig(BaseModel):
    algorithmHyperParameters: Optional[HyperParameters] = None
    autoMLConfig: Optional[AutoMLConfig] = None
    eventValueThreshold: Optional[EventValueThreshold] = None
    featureTransformationParameters: Optional[FeatureTransformationParameters] = None
    hpoConfig: Optional[HPOConfig] = None
    optimizationObjective: Optional[OptimizationObjective] = None


class SolutionVersion(BaseModel):
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    eventType: Optional[EventType] = None
    failureReason: Optional[FailureReason] = None
    lastUpdatedDateTime: Optional[Date] = None
    name: Optional[Name] = None
    performAutoML: Optional[PerformAutoML] = None
    performHPO: Optional[PerformHPO] = None
    recipeArn: Optional[Arn] = None
    solutionArn: Optional[Arn] = None
    solutionConfig: Optional[SolutionConfig] = None
    solutionVersionArn: Optional[Arn] = None
    status: Optional[Status] = None
    trainingHours: Optional[TrainingHours] = None
    trainingMode: Optional[TrainingMode] = None
    tunedHPOParams: Optional[TunedHPOParams] = None


class CreateSolutionRequest(BaseModel):
    datasetGroupArn: Arn
    eventType: Optional[EventType] = None
    name: Name
    performAutoML: Optional[PerformAutoML] = None
    performHPO: Optional[Boolean] = None
    recipeArn: Optional[Arn] = None
    solutionConfig: Optional[SolutionConfig] = None
    tags: Optional[Tags] = None


class DescribeMetricAttributionResponse(BaseModel):
    metricAttribution: Optional[MetricAttribution] = None


class DescribeSolutionVersionResponse(BaseModel):
    solutionVersion: Optional[SolutionVersion] = None


class Solution(BaseModel):
    autoMLResult: Optional[AutoMLResult] = None
    creationDateTime: Optional[Date] = None
    datasetGroupArn: Optional[Arn] = None
    eventType: Optional[EventType] = None
    lastUpdatedDateTime: Optional[Date] = None
    latestSolutionVersion: Optional[SolutionVersionSummary] = None
    name: Optional[Name] = None
    performAutoML: Optional[PerformAutoML] = None
    performHPO: Optional[PerformHPO] = None
    recipeArn: Optional[Arn] = None
    solutionArn: Optional[Arn] = None
    solutionConfig: Optional[SolutionConfig] = None
    status: Optional[Status] = None


class DescribeSolutionResponse(BaseModel):
    solution: Optional[Solution] = None
